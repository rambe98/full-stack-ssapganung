-- 사원 테이블에서 직종, 평균급여를 출력하되
-- 평균 급여가 BRUCE 보다 큰 경우만 조회
SELECT JOB_ID, AVG(SALARY) FROM EMPLOYEES
GROUP BY JOB_ID HAVING AVG(SALARY) >
(SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Bruce'); 

-- 사원 테이블에서 성에 'Bat'을 포함하는 사원과 같은 부서에서 
-- 근무하는 사원들의 부서 번호, 이름을 출력
SELECT DEPARTMENT_ID, FIRST_NAME FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES
WHERE LAST_NAME LIKE 'Bat%');

-- 사원테이블에서 100번 부서의 최소 급여보다 많이 받는
-- 다른 부서의 부서 번호, 최소 급여를 조회하세여
SELECT DEPARTMENT_ID, MIN(SALARY) FROM EMPLOYEES
GROUP BY DEPARTMENT_ID HAVING MIN(SALARY) >
(SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100); 

-- PLAYER 테이블에서 TEAM_ID가 'K01'인 선수 중
-- POSITION이 'GK'인 선수
SELECT *FROM (SELECT * FROM PLAYER WHERE TEAM_ID='K01')
WHERE "POSITION" = 'GK';

-- PLAYER 테이블에서 전체 평균키와 포지션별 평균키 구하기

SELECT AVG(HEIGHT), FROM PLAYER;

SELECT "POSITION" ,AVG(HEIGHT), (SELECT ROUND(AVG(HEIGHT),1) FROM PLAYER) 
FROM PLAYER WHERE "POSITION" IS NOT NULL GROUP BY POSITION;

-- AUTO COMMIT
--  내가 실행하는 쿼리문이 테이블에 바로 반영
-- COMMIT이 되면 되돌아 가는 것이 불가능하다.

-- PLAYER테이블에서 NICKNAME이 NULL인 선수들은
-- 정태민 선수의 닉네임으로 변경하기

SELECT "POSITION" ,AVG(HEIGHT), (SELECT ROUND(AVG(HEIGHT),1) FROM PLAYER) 
FROM PLAYER WHERE "POSITION" IS NOT NULL GROUP BY POSITION;

UPDATE PLAYER SET NICKNAME = (SELECT NICKNAME FROM PLAYER 
WHERE PLAYER_NAME = '정태민') WHERE NICKNAME IS NULL;

SELECT * FROM PLAYER;

-- 사원 테이블에서 평균 급여보다 낮은 사원들의 급여를 10% 인상

UPDATE EMPLOYEES SET SALARY  = SALARY*1.1
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES); 

SELECT * FROM EMPLOYEES ;

-- PLAYER 테이블에서 평균 키보다 큰 선수들을 삭제
DELETE FROM PLAYER
WHERE HEIGHT > (SELECT AVG(HEIGHT)FROM PLAYER );

-- FROM절에서 쓸 떄 : IN LINE VIEW
-- SELECT절에서 사용할 때 : SCALAR
-- WHERE절에서 사용할 때 : SUB QUERY

-- 사원 테이블에서 성과 이름 연결하기
SELECT FIRST_NAME|| ' ' || LAST_NAME FROM EMPLOYEES;

-- XX의 급여는 XX이다.
 SELECT FIRST_NAME|| '의 급여는 ' || SALARY || '이다.' FROM EMPLOYEES;

SELECT COUNT(SALARY) AS 갯수,
       MAX(SALARY) AS 최대값,
       MIN(SALARY) AS 최소값,
       SUM(SALARY) AS 합계,
       AVG(SALARY) AS 평균 FROM EMPLOYEES;

-- 사원테이블에서EMPLOYEE_ID를 "사번"으로 FIRST_NAME을 "이름"로, SALARY를 "급여"로 바꿔서 검색
SELECT EMPLOYEE_ID AS "사번",
FIRST_NAME AS "이름", SALARY AS "급여" FROM EMPLOYEES;

-- 두개 이상의 테이블에서 각각의 컬럼을 조회하려고 한다면 어떤테이블에서 온 컬럼인지 확실하게 적어줘야 한다.
SELECT EMPLOYEES.DEPARTMENT_ID, EMPLOYEES.DEPARTMENT_ID 
FROM EMPLOYEES, DEPARTMENTS;

-- INNER JOIN
SELECT * FROM DEPARTMENTS d ;
SELECT * FROM EMPLOYEES e ;
SELECT FIRST_NAME, E.DEPARTMENT_ID ,D.DEPARTMENT_ID 
FROM EMPLOYEES e JOIN DEPARTMENTS d  
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

-- 부서테이블,. 지역테이블로 부터 부서명과 도시 명을 조회하세요
SELECT D.DEPARTMENT_NAME ,L.CITY 
FROM DEPARTMENTS d JOIN LOCATIONS l
ON D.LOCATION_ID = L.LOCATION_ID ; 

-- 지역 테이블과, 나라 테이블(COUNTRIES)를 조회하여
-- 도시명과 국가명(COUNTRY_NAME)을 조회하세요
SELECT L.CITY ,C.COUNTRY_NAME 
FROM LOCATIONS l JOIN COUNTRIES c 
ON L.COUNTRY_ID = C.COUNTRY_ID ;

-- 이름, 성, 직종, 직업명을 조회해라
-- EMPLOYEES, JOBS 테이블을 이요한다.
SELECT E.FIRST_NAME ,E.LAST_NAME ,J.JOB_ID ,J.JOB_TITLE  
FROM EMPLOYEES e JOIN JOBS j 
ON E.JOB_ID = J.JOB_ID ;

-- 테이블 3개 조인
-- 사원, 부서, 지역테이블로부터, 이름, 이메일, 부서번호ㅓ, 부서명, 지역번호, 도시명
SELECT  E.FIRST_NAME, 
		E.EMAIL,
		E.DEPARTMENT_ID, 
		D.DEPARTMENT_NAME, 
		L.LOCATION_ID, 
		L.CITY 
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
JOIN LOCATIONS l ON D.LOCATION_ID  = L.LOCATION_ID 
AND L.CITY = 'Seattle';

SELECT *FROM EMP;

SELECT E1.ENAME 상사, E2.ENAME 직원 
FROM EMP E1 JOIN EMP E2 
ON E1.EMPNO = E2.MGR;

CREATE TABLE 테이블A(
	A_id NUMBER,
	A_NAME VARCHAR2(10)
);
CREATE TABLE 테이블B(
	B_id NUMBER,
	B_NAME VARCHAR2(10)
);

INSERT ALL
	INTO 테이블A VALUES(1,'JHON')
	INTO 테이블A VALUES(2,'JANE')
	INTO 테이블A VALUES(3,'BOB')
	INTO 테이블B VALUES(101,'APPLE')
	INTO 테이블B VALUES(102,'BANANA')
SELECT * FROM DUAL;

SELECT * FROM 테이블A;
SELECT * FROM 테이블B;

SELECT * FROM 테이블A CROSS JOIN 테이블B;


-- 사원테이블과 부서 테이블의 LEFT OUTTER JOIN을 이용하여
-- 사원이 어느 부서에 있는지 조회하기

SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

-- 사원테이블과 부서 테이블의 RIGHT OUTTER JOIN을 이용하여
-- 사원이 어느 부서에 있는지 조회하기

SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES e RIGHT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

-- 사원 테이블과 부서테이블의 FULL OUTER JOIN을 이용하여 
-- 사원이 어느 부서에 있는지 조회하기
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM employees e
FULL OUTER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

-- TEAM테이블과 STADIUM테이블을 통해 홈팀이 있는 구장만
-- 팀이름과 구장이름으로 조회
SELECT T.TEAM_NAME ,S.STADIUM_NAME 
FROM TEAM t LEFT OUTER JOIN STADIUM s 
ON T.STADIUM_ID =S.STADIUM_ID ;

SELECT T.TEAM_NAME ,S.STADIUM_NAME 
FROM TEAM t RIGHT OUTER JOIN STADIUM s 
ON T.STADIUM_ID =S.STADIUM_ID ;


-- 누가 얼마나 받았는지에 대한 조회

create view MY_EMPL AS(
select employee_id, first_name, salary
from employees
);
SELECT * FROM MY_EMPL;
DROP VIEW MY_EMPL;

create view MY_EMPL AS---> AS가 없으면 VIEW가 만들어 지지 않는다.
(
select employee_id, first_name, salary, (SALARY * COMMISSION_PCT) COMM
FROM EMPLOYEES
);
SELECT * FROM MY_EMPL;

-- 뷰이름 : PLAER_AGE
-- 선수의 이름과 나이를 조회하는 쿼리를 넣기

CREATE VIEW PLAYER_AGE AS(
	SELECT PLAYER_NAME, ROUND((SYSDATE - BIRTH_DATE)/365) AGE FROM PLAYER
);

SELECT * FROM PLAYER_AGE;

SELECT * FROM PLAYER_AGE WHERE AGE >=30;

-- 뷰이름 : DATA_PLUS
-- 사원테이블에서 급여를 많이 받는 분으로
-- 순위와 이름, 급여를 조회하는 쿼리 넣기
CREATE OR REPLACE VIEW DATA_PLUS AS(
SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC) AS "RANK", FIRST_NAME, SALARY FROM EMPLOYEES
);
SELECT  * FROM DATA_PLUS;

-- PLAYER테이블뒤에 TEAM_NAME 컬럼은 추가한 VIEW 만들기
-- JOIN을 사용하면 됨
-- 뷰 이름 : PLAYER_TEAM_ NAME

CREATE OR REPLACE VIEW PLAYER_TEAM_NAME AS(
SELECT P.*, TEAM_NAME
FROM PLAYER p JOIN TEAM T ON P.TEAM_ID = T.TEAM_ID
);

SELECT * FROM  PLAYER_TEAM_NAME;

-- STADIUM테이블, TEAM 테이블
-- HOMETEAM_ID, STADIUM_NAME, TEAM_NAME을 조합
-- 홈팀이 없는 경지장도 검색
-- 뷰 이름: STADIUM_INFO

CREATE OR REPLACE VIEW STADIUM_INFO AS(
	SELECT HOMETEAM_ID,STADIUM_NAME,TEAM_NAME 
	FROM TEAM t LEFT OUTER JOIN STADIUM s
	ON T.TEAM_ID = S.HOMETEAM_ID
);

SELECT * FROM STADIUM_INFO;

DROP VIEW STADIUM_INFO;

SELECT * FROM STADIUM_INFO WHERE HOMETEAM_ID IS NULL;

-- EMPLOYEES테이블에서 JOB_ID가 'IT_PROG'인 사람의 이름을
-- 자신의 이름으로 바꾸기
UPDATE EMPLOYEES SET FIRST_NAME = '잉잉잉' 
WHERE JOB_ID = 'IT_PROG'; 
SELECT * FROM EMPLOYEES;
-- 데이터 베이스에 영향을 주는 INSERT,UPDATE, DELETE문에서 많이 사용됨







