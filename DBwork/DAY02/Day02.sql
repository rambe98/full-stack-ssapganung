CREATE TABLE "USER" (
	U_ID VARCHAR2(100) PRIMARY KEY,
	U_PW VARCHAR2(100),	
	U_NAME VARCHAR2(200),	
	U_ADDRESS VARCHAR2(300),	
	U_EMAIL VARCHAR2(300),	
	U_BIRTH	DATE
);
CREATE TABLE PRODUCT(
	P_NUM NUMBER PRIMARY KEY,
	P_NAME VARCHAR2(100),
	P_PRICE NUMBER ,
	P_COUNT NUMBER 
);
CREATE TABLE "ORDER"(
	O_NUM NUMBER PRIMARY KEY,
	O_DATE DATE,
	U_ID VARCHAR2(100),	
	P_NUM NUMBER,
	CONSTRAINT USER_FK FOREIGN KEY (U_ID) REFERENCES "USER"(U_ID),
	CONSTRAINT PRODUCT_FK FOREIGN KEY (P_NUM) REFERENCES PRODUCT(P_NUM)
);
--------------------------------------------------------------------------
CREATE TABLE FLOWER(
	F_NAME VARCHAR2(100) PRIMARY KEY,
	F_COLOR VARCHAR2(100),
	F_COST NUMBER	
);
CREATE TABLE F_CASE(
	FC_NUM NUMBER PRIMARY KEY,
	FC_COLOR VARCHAR2(100),
	FC_SHAPE VARCHAR2(100),
	F_NAME VARCHAR2(100),
	CONSTRAINT FLOWER_FK FOREIGN KEY (F_NAME) REFERENCES FLOWER(F_NAME)
);
--------------------------------------------------------------------------
CREATE TABLE ARTIST(
	NAME VARCHAR2(100) PRIMARY KEY,
	COUNTRY VARCHAR2(100),
	DEVETYEAR DATE
);
CREATE TABLE CD(
	C_TITLE VARCHAR2(100) PRIMARY KEY,
	PRICE NUMBER,
	GENRE VARCHAR2(100),
	TRACKLIST VARCHAR2(100),
	ARTISTNAME VARCHAR2(100),
	CONSTRAINT NAME_FK FOREIGN KEY (ARTISTNAME) REFERENCES ARTIST(NAME)
);
CREATE TABLE TRACK(
	T_TITLE VARCHAR2(100) PRIMARY KEY,
	RUNNINGTIME NUMBER,
	C_TITLE VARCHAR2(100),
	CONSTRAINT C_TITLE_FK FOREIGN KEY (C_TITLE) REFERENCES CD(C_TITLE)
);
--------------------------------------------------------------------------
CREATE TABLE DEPT( -- 부서
	DEPT_ID NUMBER PRIMARY KEY,
	DEPT_NAME VARCHAR2(100)
);
CREATE TABLE EMPLOYEE( -- 직원
	EMP_ID NUMBER PRIMARY KEY,
	EMP_NAME VARCHAR2(100),
	EMP_POSITION VARCHAR2(100),
	DEPT_ID NUMBER,
	CONSTRAINT DEPT_ID_FK FOREIGN KEY (DEPT_ID) REFERENCES DEPT(DEPT_ID)
);
CREATE TABLE DEPENDENT(-- 부양가족
	DEP_NAME VARCHAR2(100),
	DEP_AGE NUMBER,
	EMP_ID NUMBER,
	CONSTRAINT DEP_EMP_ID_FK FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID)
);
CREATE TABLE WORKRECORD(-- 근무 기록
	PERIOD DATE PRIMARY KEY,
	EMP_ID NUMBER,
	CONSTRAINT WORK_EMP_ID_FK FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID)
);
--------------------------------------------------------------------------
-- 데이터 조회
--SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES;
-- 컬럼 조회
--SELECT * FROM COLS WHERE TABLE_NAME = 'EMPLOYEES';

-- 사원 테이블에서 모든 정보를 조회하시오
SELECT * FROM EMPLOYEES;
-- 부서 테이블에서 모든 정보를 조회하시오
SELECT * FROM DEPARTMENTS;
-- 사원 테이블에서 FIRST_NAME이름, JOB_ID직족,SALARY급여를 조회하십시오
SELECT FIRST_NAME,JOB_ID,SALARY FROM EMPLOYEES;
-- 컬럼에 실제로 없는 정보도 출력할 수 있다.
SELECT EMPLOYEE_ID, FIRST_NAME,JOB_ID,SALARY,COMMISSION_PCT,SALARY*COMMISSION_PCT
FROM EMPLOYEES;
-- 사원테이블에서 급여가 10000이상인 사원들의 정보를 사번, 이름, 급여 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME,SALARY
FROM EMPLOYEES WHERE SALARY >= 10000;
-- 사원테이블에서 이름이 Michael인 사원의 사번, 이름을 조회
-- 문자열 데이터는 ''에 넣어서 표현
SELECT EMPLOYEE_ID, FIRST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME='Michael';
-- 사원테이블에서 직종이 IT_PROG인 사원들의 정보를 사번, 이름, 직종, 급여 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY 
FROM EMPLOYEES WHERE JOB_ID='IT_PROG';
-- 사원테이블에서 급여가 10000이상이면서 13000이하인 사원의 정보를 이름, 급여 순으로 조회
SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES WHERE SALARY >= 10000 AND SALARY <= 13000;
-- 사원테이블에서 입사일이 05년9월21일 이후에 입사한 사원의 정보를 사번, 이름, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE 
FROM EMPLOYEES WHERE HIRE_DATE >='2005-09-21';
-- 사원테이블에서 06년도에 입사한 사원들의 정보를 사번, 이름, 직종, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE 
FROM EMPLOYEES WHERE HIRE_DATE >='2006-01-01' AND HIRE_DATE<='2006-12-31';
-- 사원테이블에서 직종이 SA_MAN이거나 IT_PROG인 사원들의 모든정보를 출력하시오
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN' OR JOB_ID='IT_PROG';
-- 사워테이블에서 급여가 2200, 3200, 5000, 6800를 받는 사원들의 정보를 사번, 이름 직종, 급여 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY 
FROM EMPLOYEES WHERE SALARY='2200' OR SALARY = '3200' OR SALARY='5000' or SALARY='6800';

SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE, FROM EMPLOYEES 
WHERE HIRE_DATE BETWEEN '2006-01-01' AND '2006-12-31';
-- IN(값,값,값)
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES 
WHERE SALARY IN (2200,3200,5000,6000);

-- 종이 SA_MAN , IT_PROG가 아닌 모든 사원의 정보를 출력
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN ('SA_MAN','IT_PROG');

-- LIKE 유사검색
-- WHERE 절에서 사용되며 부분적으로 일치하는 속성을 찾을 때 사용된다.
-- % : 모든값
-- _ : 하나의 값

-- 사원테이블에서 사원들의 이름 중 M으로 시작하는 사원의 정보를 사번, 이름, 직종 순으로 출력
select employee_id, first_name, job_id 
from employees where first_name LIKE 'M%';
-- 사원테이블에서 이름이 d로 끝나는 사원의 사번, 이름 직종을 출력
select employee_id ,first_name, job_id 
from employees where first_name LIKE'%d';
-- 이름의 어디라도 a가 포함되어 있는 사원의 정보를 이름, 직종 순으로 출력
select first_name, job_id 
from employees where first_name LIKE'%a%';
-- 이름의 첫글자가 M 이면서 총 7글자의 이름을 가진 사원 정보를 사번, 이름 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES WHERE FIRST_NAME LIKE 'M______';
-- 이름의 세번째 글자에 A가 들어가는 사원들의 정보를 사번 이름순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES WHERE FIRST_NAME LIKE '__a%';
-- 이름에 소문자o가 들어가면서 이름이 a로 끝나는 사원들의 정보를 이름, 급여 순으로 조회
SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES WHERE FIRST_NAME LIKE '%o%a';
-- 이름이 H로 시작하면서 6글자 이상인 사원들의 정보를 사번, 이름 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES WHERE FIRST_NAME LIKE 'H_____%';
-- 이름에 s와 S가 포함되어 있지 않은 사원들만 사번, 이름으로 검색하시오
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES WHERE FIRST_NAME 
NOT LIKE '%s%' AND FIRST_NAME NOT LIKE '%S%';
-- LIKE를 사용하여 여러 개의 문자를 검색하기 위해서는 OR연산자를 사용하여 여러개의 LIKE 조건을 부여할 수 있다.
SELECT * FROM EMPLOYEES WHERE FIRST_NAME 
LIKE'%el%' OR FIRST_NAME LIKE '%en%';




