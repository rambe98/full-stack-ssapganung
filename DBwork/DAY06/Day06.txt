CASE문
CASE WHEN THEN ELSE END 어떠한 조건에 맞춰 값을 출력해주는 문법
CASE WHEN 조건식 THEN '참 값' ELSE '거짓 값' END

PL/SQL
프로그래밍 언어의 특성을 수용하여 SQL에서는 사용할 수 없는 
절차적 -프로그래밍 기능을 가지고 있어 QL의 단점을 보완할 수 있는 프로그래밍 언어

PL/SQL문을 사용하는 이유
대용량 데이터를 연산해야 할 때, WAS등의 서버로 전송해서 처리하려면 
네트워크에 부하가 많이 걸린다.
이때 프로시저나 함수를 사용하여 데이터를 연산하고 가공한 후에 , 
최종 결과만 서버에 전송하면 부담을 많이 줄일 수 있다.
로직을 수정하기 위해 서버를 껐다 켜지 않아도 된다. 
서버에서는 단순히 DB에 프로시저를 호출하여 사용하면 된다.
쿼리문을 직접 노출하지 않는 만큼, SQL injection의 위험성이 줄어든다.

PL/SQL의 기본구조

DECLARE(선언부) PL/SQL문에서 사용하는 모든 변수나 상수를 선언하는 부분
IS 
BEGIN(실행부) 절차적으로 SQL문을 실행할 수 있도록 절차적인 언어의 요소인 제어문, 
반복문 함수의 정의 등 로직을 기술할 수 있는 부분 
ㄴ 쿼리문을 작성할 수 있다.
END;(실행문종료)

PL/SQL문의 종류
프로시저 : 리턴 값을 하나 이상 가질 수 있는 프로그램
함수 : 리턴 값을 반드시 반환해야 하는 프로그램
패키지 : 하나 이상의 프로시저, 함수, 변수 등의 묶음
트리거 : 지정된 이벤트가 발생하면 자동으로 실행되는 PL/SQL블록

IF문
1. IF 조건 THEN 실행문;
   END IF;
2. IF 조건 THEN 실행문;
   ELSE 실행문;
   END IF;
3. IF 조건 THEN 실행문;
   ELSIF 조건문 THEN 실행문;
   ELS 실행문;
   END IF;

반복문
1. FOOR LOOP문
FOR index in [REVERSE] 시작값 .. END 값 LOOP
	STATEMENT 1(반복하고자 하는 명령)    
	STATEMENT 2(반복하고자 하는 명령)        
	...
END LOOP;
index는 자동 선언되는 binary_integer형 변수이고, 1씩 증가 한다.
REVERSE 옵션이 사용될 경우 index는 upper_bound에서 lower_bound까지 1씩 감소한다.
IN 다음에는 SELECT문이 올 수 있다.
예시
BEGIN	FOR i in 1..4 LOOP	  	
		if mod(i, 2) = 0 then 			
			dbms_output.put_line( i || '는 짝수!!');		
		else
			dbms_output.put_line( i || '는 홀수!!');	
		end if;
	END LOOP;
END;

프로시저(PROCEDURE)
데이터베이스에 대한 일련의 작업을 처리한 절차를 
RDBMS에 저장한 것으로 영구 저장 모듈이라고도 합니다.
일련의 쿼리를 마치 하나의 함수처럼 사용하기 위한 쿼리의 집합입니다.
거의 함수와 비슷하다.

장점
하나의 요청으로 여러 SQL문을 실행시킬 수 있습니다.
네트워크 소요 시간을 줄여 성능을 개선할 수 있습니다.
기능변경이 편하다.
서버에서 실행되기 때문에 속도가 빠다.
리턴값이 있을 수 도 있고, 없을 수 도 있다.
여러개의 리턴값을 보낼 수 있다.

단점
문자나 숫자 연산에 사용하면 오히려 C,JAVA보다 느린 성능을 볼 수 있다.
유지보수가 쉽지 않아 재사용성이 좋지 않다.

함수
하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 코드의 집합
- 반환 값이 무조건 있어야함
- 쿼리문 내에서 사용이 가능함
- 클라이언트(화면)에서 값을 건네받고 서버에서 필요한 값을 가져와서 클라이언트에서 작업을 하고 반환한다
- 프로시저보다는 속도가 느리다
예시
CREATE OR REPLACE PROCEDURE 프로시져이름 (
        매개변수1 IN 데이터타입:= 값,
        매개변수2 IN 데이터타입%TYPE
);
IS
함수 내에서 사용할 변수, 상수 등 선언 , 밑에서 반복되서 사용될 문장을 하나로 선언해서 사용하겠다.
BEGIN
    실행할 문장
END 프로시져 이름;

프로시저 사용시 매개변수를 정의한 순서에 맞게 값을 넣어줘야 전달이 된다.
CALL 프로시저의 이름(값1,값2)

프로시저와 SQL
프로시저와 DML 접목하기

JOBS테이블에 데이터를 INSERT해주는 프로시저 만들기



