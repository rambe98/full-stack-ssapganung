html,css,js

웹페이지란?
일종의 문서파일이다.
웹페이지를 작성하는 도구는 html이다.
웹페이지는 주로 원거리 통신을 통해 전달되는 경우가 많으며, 이 때 사용하는 방식을 HTTP라고 한다.
웹페이지는 글자와 사진뿐 아니라 동영상, 음악 등 다양한 정보를 아름다운 형태로 제공할 수 있다.
웹페이지들이 모여서 만들어진 덩어리를 웹사이트라고 한다.

웹개발자의 업무
프론트엔드 개발자
사용자가 직접적으로 눈으로 보며 사용하는 웹페이지를 개발하는 엔지니어이다.
백엔드 개발자
데이터를 저장하거나 프론트엔드의 원활한 활동을 도와주기 위한 서버를 개발하는 엔지니어이다.
바깥에서는 잘 보이지 않는 뒷단에서 작동하는 소프트웨어를 개발한다.

마크업언어란?
문서에 마크업을 추가하기 위해 사용하는 도구이다.
언어라고 이름이 붙은 이유는 사람과 컴퓨터가 서로 대화하기 위해 사용하는 도구이기 때문이다.
마크업은 교과서나 참고서의 중요한 부분에 밑줄을 긋거나 형광펜으로 칠하는 등 문서를 꾸미는 행위를 말한다.
웹페이지도 마크업 언어로 작성된 문서이다.

웹브라우저 	검색엔진
크롬		구글
웨일		네이버

웹 프론트엔드 개발을 위한 기본기
HTML을 통해 웹 페이지를 제작해 볼 것입니다.
이후 CSS를 통해 HTML로 제작한 홈페이지에 디자인적 요소를 추가해 더욱 아름다운 웹페이지를 제작할 수 있다.
마지막으로 JS를 활용하면 웹 페이지에 각양각색의 기능들을 추가할 수 있다.
웹 페이지가 역동적으로 움직이고 변화하며, 우리와 상호작용 할 수 잇는 비밀이 JS덕분이다.

2. 개발을 도와주는 유용한 프로그램 설치하기
프레임워크란?
복잡한 문제를 해결하는 데 사용할 수 있는 누군가 만들어 둔 소프트웨어이다.
영단어 그대로 번역하면 뼈대 또는 골조라는 단어로 해석할 수 있다.

프레임워크를 사용하여 문제를 해결하는 방법
구글 검색을 통해 원하는 프레임워크를 찾아냈다면, 프레임워크의 사용설명서를 읽어 보시오.
우리는 지킬이라는 프레임워크를 사용할 것이다.

깃허브
작업중인 코드를 업로드하건, 다른 컴퓨터에서 다운받는 등의 작업을 도와주는 일종의 온라인 사무실과도 같은 서비스이다.
코드의 백업과 무료 웹 호스팅 이용을 위해 깃허브를 사용해보자.

git
깃은 컴퓨터 파일의 변경사항을 추적하고 여러 사용자 간에 
파일을 다루는 공동 작업을 위한 분산 버전 관리 시스템이다.

git장점
인터넷이 연결되지 않아도 개발을 진행할 수 있고 분산 버전 관리이기 때문에
중앙저장소가 삭제되도 원상복구 가능
각자의 개발자가 branch에서 개발한 뒤 본프로그램에 합치는 merge방식을 통한 병렬개발 가능

git 기본 용어
- 동작과 이력을 효율적으로 처리하기 위해 저장공간을 논리적으로 분리
- 작업공간(workinmg directory / working tree)
- 임시공간(stage)
- 실질적으로 저장되고 기록되는 공간 (repository)

repository
- 저장소
- 히스토리, 태그, 소스의 가지치기 혹은 branch에 따라 버전을 저장
- 작업자가 변경한 모든 히스토리 확인 가능

working tree
- 작업하는 공간
- 로컬 저장소에 접근하여 파일을 생성, 수정, 저장 하는 공간
- staging area에 맞닿아 있음
- 저장소의 어느 한 시점을 바라보는 작업자의 현재 시점

staging area 
- 저장소에 저장하기 전 임시 저장하는 공간

commit
- 현재 변경된 작업 상태 점검을 마치고 확정적으로 저장소에 저장하는 작업

head
현재 작업중인 branch를 가리킨다.

branch
가지 또는 분기점
- 작업을 할 때 현재 상태를 복사하여 branch에서 작업을 한 후 완전하다 싶을 때
merge하여 작업한다.

merge
- 다른 branch의 내용을 현재 branch로 가져와 합치는 작업

git 기본 명령어
1. githelp
- 도움말 기능
- 사용법이 궁금한 명령에 대해 'githelp 명령어'를 통해 해당 도움말에 대해 알 수 있다.

2. git init
- git 저장소 초기화
- 저장소나 디렉토리 안에서 이명령어를 실행하기 전까지는 그냥 일반 폴더임
- 이 명령어를 입력해야 추가적인 git 명령어 입력 가능

3. git status
- 저장소 상태 체크
- 어떤 파일이 저장소 안에 있는지, 커밋이 필요한 변경사항이 있는지, 현재 저장소의 어떤 branch에서 작업하고 있는지 등 상태 정보 출력

4. git branch
- 새로운 branch를 생성
- 여러 협업자와 작업할 시, 이 명령어로 새로운 브랜치를 만들고
자신만의 변경사항과 파일 추가 및 커밋 타임라인을 생성, 완성 후 협업자의 btanch 혹은 main과 merge한다.

5. git add
- staging영역에 변경 사항 추가
- 다음 commit전까지 변경분을 staging영역에 보관하여 변동 내역을 저장
git add 업로드 하고 싶은 파일 or 경로
git add.현재 디렉토리의 모든 변경내용 스테징에 등록
git add -A 작업 디렉토리의 모은 변경 내용을 staging에 등록
git add -p 터미널에서 staging으로 넘길 파일 선택 가능

6. git commit
- staging에 있는 내용을 적용

git commit -m 메세지
커밋 메세지를 반영한 수정본 파일 묶음

git log
커밋 내역 확인

git push
로컬 컴터에서 서버로 변경 사항 보내기

git pull
서버 저장소로 부터 최신버전을 pull

git clone
서버 저장소로 부터 최신 버전을 다운로드

git checkout
작업하길 원하는 branch로 이동

git merge
개별 branch에서 마친 작업을 master branch로 병합




