/*	파일 입출력
	자바 입출력과 스트림
	프로그램은 데이터를 외부에서 입력받아 처리하고 출력하는 구조로 되어 있습니다.
	프로그램으로 들어오는 모든 값을 Input이라고 한다.
	프로그램을 나가는 모든 값을 Output이라고 한다.
	자바에서는 입출력을 처리하기 위해 별도의 I/O패키지를 제공한다.
	데이터는 자바에서 처리할 수 있는 모든것을 의미한다.
	디스크상에 존재하는 데이터일 수도 있고, 키보드나 마우스와 같은 외부입력 장치에서 입력되는 데이터일 수도 있고,
	인터넷을 통해 전송되는 데이터일 수도 있다.
	자바가 디스크에 접근에 데이터를 주고받는 작업을 도와주는 통로를 '스트림(stream)'이라고 한다.
	
	File클래스 (file_ex 패키지 참조)
	파일 또는 폴더에 대한 정보를 제공하는 클래스
	경로명, 파일 크기, 타입, 날짜 등의 속성 정보를 제공한다.
	파일 생성, 삭제, 이름 변경 등 파일 관리 작업을 지원하기 위한 메서드로 구성되어 있다.
	
	입출력 스트림의 종류
	자바의 기본적인 데이터 입출력은 java.io 패키지에서 제공한다.
	java.io패키지에서는 파일 시스템의 정보를 얻기 위한 
	File클래스와 데이터 입출력을 위한 다양한 스트림 클래스를 제공한다.
	스트림의 종류를 크게 분류하면 전달 방식에 따라 바이트(byte)기반 스트림과 
	문자(char)기반 스트림으로 구분한다.
	바이트 기반의 스트림은 데이터를 컴퓨터의 기본 단위인 byte단위로 나누어 읽거나 쓰고,
	문자 기반 스트림은 텍스트 기반 문서를 다루기 위해 사용하는 스트림이다.
	
	바이트(byte)기반 스트림
	컴퓨터의 모든 데이터는 바이트(byte)단위로 이루어져 있다.
	따라서 바이트 기반 스트림의 경우 모든 타입의 데이터를 읽고 쓰는 것이 가능하다.
	바이트 기반의 스트림은 바이트 입력 스트림과 바이트 출력 스트림이 있다.
	
	InputStream (inputstream 패키지 참조)
	바이트 기반의 입력 스트림은 최상위 클래스로 InputStream객체가 제공된다.
	해당 객체를 상속해 다양한 입력 스트림들이 존재한다.
	
	모두 InputStream을 상속하여 다양한 입력 스트림을 구현하고 있다.
	각자의 개발 목적에 맞게 성택하여 사용할 수 있다.
	예를 들어 파일을 읽어서 사용하고 싶다면 FileInputStream객체를 선언해 사용하면 된다.
	
	InputStream의 주요 메서드
	메서드				설명
	------------------------------------------------------------
	int read()			문자를 1byte씩 읽고 반환
						더 이상 읽을 문자가 없으면 -1을 반환
	------------------------------------------------------------
	int read(byte[]b)	매개변수로 주어진 배열에 읽은 문자를 저장하고 실제로 읽은 수만큼 반환
						더 이상 읽을 문자가 없으면 -1을 반환
	------------------------------------------------------------
	int read(byte[],	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 저장
	int offset,int len)	시작 위치(offset), 길이(len)
	------------------------------------------------------------
	int available()		스트림으로부터 읽어올 수 있는 데이터의 크기를 변환
	------------------------------------------------------------
	close()				스트림 사용을 종료하고 자원을 반환
	
	OutputStream (outputstream 패키지 참조)
	바이트 기반의 출력 스트림은 최상위 클래스로 OuputStream 객체가 제공된다.
	해당 객체를 상속해 다양한 출력 스트림들이 존재한다.
	
	OutputStream의 주요 메서드
	메서드				설명
	int write(int b)	1byte 출력
	------------------------------------------------------------
	int write(byte[]b)	매개변수로 주어진 배열의 모든 바이트 출력
	------------------------------------------------------------
	int write(byte[],	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 출력
	int offset,int len)	시작 위치(offset), 길이(len)
	------------------------------------------------------------
	int flush()			출력 버퍼에 장류하는 모든 내용 출력
	------------------------------------------------------------
	close()				스트림 사용을 종료하고 자원을 반환
	
	FileOutputStream (outoutstream 패키지 참조)
	파일을 쓸 때 기존 파일명이 존재하는 경우가 있다.
	이때 해당 파일의 내용을 유지한 채 이어 쓰거나 기존의 내용을 무시하고 새롭게 파일을 생성할 수 있다.
	new FileOutputStream(경로/파일명, 이어쓰기 옵션);
	이어쓰기 옵션이 true이면 기존 파일에 이어서 내용을 추가하고, false면 기존 내용을 무시하고 새로 쓰게 된다.
	기본 옵션은 false로 되어있다.
	
	문자 기반 스트림
	자바에서는 기본 자료형은 char형을 통해 문자를 저장할 수 있다.
	1byte 단위로 처리하는 바이트 기반 스트림은 모든 파일을 다룰 수 있으나 
	문자를 처리하는 char형의 크기는 2byte로 별도의 처리를 하지 않으면 정상적으로 읽지 못하는 경우가 있다.
	이때, 문자 기반의 스트림을 사용하면 간단하게 문자를 처리할 수 있다.
	
	Reader : 문자 입력 스트림 (reader 패키지 참조)
	문자 기반 입력 스트림은 최상위 클래스인 Reader를 상속해 다양한 클래스를 제공한다.

	문자기반 스트림에서 제공하는 메서드
	메서드					설명
	int read()				1개의 문자를 읽고 반환
							더 이상 읽을 문자가 없으면 -1를 반환
	------------------------------------------------------------
	int read(char[] buf)	매개변수로 주어진 배열에 읽은 문자를 저장하고 읽은 수만큼 반환
							더 이상 읽을 문자가 없으면 -1를 반환
	------------------------------------------------------------
	int read(char[] cbuf,	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 저장\
	int offset,int len)		시작위치(offset),길이(len)	
	------------------------------------------------------------
	close()					스트림 사용을 종료하고 자원을 반환
	
	보조 스트림 (bufferd 패키지 참조)
	스트림은 기능에 따라 스트림과 보조 스트림으로 구분한다.

	기반 스트림 : 대상에 직접 바료를 읽고 쓰는 스트림입니다.
	보조 스트림 : 직접 읽고 쓰는 기능 없이 기반 스트림에 추가로 사용할 수 있는 스트림이다.
	보조 스트림은 실제로 데이터를 주고받을 수는 없다.

	스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로 다른 보조스트림과 중첩하여 사용할 수 있다.

	보조 스트림 연결하기
	보조 스트림을 사용하려면 보조 스트림을 매개변수로 받는 기반 스트림이 먼저 선언되어야 한다.
	보조 스트림은 스스로 데이터를 읽거나 쓸 수 없기 때문에 입출력과 바로 연결되는 기반 스트림이 필요하다.
	보조 스트림 변수명 = new 보조 스트림(기반 스트림);
	성능 향상 보조 스트림
	느린 하드디스크와 네트워크는 입출력 성능에 영향을 준다.
	이때 입출력 소스와 직접 작업하지 않고 버퍼라는 메모리를 이용해 작업하면 실행 성능을 향상시킬 수 있다.
	하지만 버퍼는 크기가 작아 많은 양의 데이터를 처리하기에는 부족하다.
	보조 스트림 중에서는 다음과 같이 메모리 버퍼를 추가로 제공하여 스트림의 성능을 향상시키는 것들이 있다.
	바이트 기반 스트림: BufferedInputStream,BufferedOutputStream
	문자 기반 스트림 : BufferedReader,BufferedWriter
	
 */


package inputoutput;

public class Explain {

}
