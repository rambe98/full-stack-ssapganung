/*	에러(error)와 예외(exception)
	자바 프로그램을 실행하다 보면 갑자기 프로그램이 종료되거나, 
	어떤 원인에 의해 잘못 동작하여 오류 메세지가 나타나는 등 예기치 못한 오류가 발생한다.
	전자는 우리가 해결할 수 없는 시스템에 에러가 발생해 프로그램이 종료된 경우이며 
	후자는 프로그램 사용 중 발생한 오류를 개발자가 처리해 메세지가 출력된 경우이다.
	
	에러(error)
	에러는 시스템에 비정상적인 상황이 생겼을 때 발생한다.
	외부 요인일 수도 있고, 프로그램 구동 중에 발생하는 치명적인 오류일 수도 있다.
	이러한 에러들은 개발자가 예측하거나 처리할 수 없는 영역이다.
	
	에러의 종류
	OutOfMemoryError: 프로그램 실행 중 메모리 부족
	IOError: 입출력 에러
	StackOverFlowError: 가용 메모리 부족 현상, 재귀 호출 문제시 발생
	
	예외(exception)
	예외란 대체로 프로그램 구동 중에 나타나는 오류들을 말한다.
	문법적으로는 문제가 없어보이지만 실제 운영 중에 생기는 문제들이다.
	예외는 체크 예외(checked exception)와 
	비체크 예외(uncheked exception)두 가지가 있다.
		
	체크 예외
	자바 소스를 컴파일 하는 과정에서 검사한다.
	보통 문법적으로 강제하여 예외 처리를 해야 하는 경우
	비체크 예외
	컴파일 과정에서 검사하지 않으므로 사용자의 경험이나 테스트로 찾아야 하는 경우

	예외 클래스
	자바는 객체 지향언어이다.
	따라서 프로그램에서 발생하는 예외들은 클래스 형태로 제공된다.
 */
/*	예외 처리 문법
	예외가 발생했을 때, 어떻게 예외 처리를 하는지 방법에 대해서 알아보자
	예외처리 과정
	코드 진행 중 예외가 발생하면 JVM에게 알린다
	JVM은 발생한 예외를 분석하여 알맞은 예외 클래스를 생성한다
	생성된 예외 객체를 발생한 지점으로 보낸다
	예외가 발생한 지점에서 처리하지 않으면 프로그램은 비정상 종료된다.
	
	try - catch 구문
	예외를 처리하는 가장 기본 문법은 try - catch문이다.
	예외가 발생할 가능성이 있는 코드는 try{}안에 작성하고
	catch 메서드는 시스템으로부터 넘어오는 예외 클래스를 받아서 처리한다.
	
	try {
    예외가 발생할 가능성이 있는 코드
	} catch (예외 클래스명 e) {
    	예외처리 코드
	}

 */

package error_ex;

public class Test_ex {

}
