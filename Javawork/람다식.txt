람다식
JDK1.8부터 함수형 프로그래밍 '람다식(Lambda expression)'을 지원하고 있다.
람다식은 이름이 없는 익명 함수(anonymous function)를 만들기 위한 표현식을 말한다.
자바는 객체를 기반으로 프로그램을 구현하는 객체 지향 프로그램이다.
따라서 클래스를 먼저 생성하고, 클래스 안에 메서드와 객체를 만들어 사용해야 한다.
하지만 함수형 프로그래밍은 객체 지향 프로그램과 달리 함수만을 구현하고 실행할 수 있는 개발방식이다

자바스크립트의 예시 인터넷창 개발자도구 -> console탭에서 작성하기

function add(num1,num2){
	return num1+num2;
}

add(10,20)
30
람다식이 도입된 이유
함수형 프로그래밍 방식
자바에서는 함수형 프로그래밍 방식이 적용되지 않았다.
자바 공부할 때 함수는 어디에 만들었는가 클래스를 나누어서 작성했었다.
자바 -> 함수가 독립적이지 않다. -> 반드시 객체를 만들어서 호출

람다식 문법
람다식 문법은 기존의 자바 문법과는 달라서 
객체 지향 프로그래밍에 익숙한 개발자들은 다소 생소할 수 있다.
하지만 문법이 매우 간결해지고, 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있다.

int add(int x, int y){
	return x+y;
}
위의 두 수를 더하는 메서드를 람다식으로 표현해보자
  (x,y) -> {return x + y'}
매개변수	함수 구현
메서드의 이름과 반환 타입을 제거하고 화살표(->)를 이용해 구현한다.
의미를 살펴보면 두 개의 파라미터(x,y)를 사용해 더한 결과를 반환하라는 의미이다.

소괄호 생략하기
람다식 문법에서는 파라미터의 자료형을 생략할 수 있다.
파라미터가 한 개인 경우에는 소괄호도 생략할 수 있다.
그러나 파라미터가 두 개 이상일 경우에는 생략할 수 없다.
(str) -> {System.out.println(str);}
	↓ 파라미터가 1개일 때
str -> {System.out.println(str);} //소괄호 생략 가능

(x,y) -> {return x+y;}
	↓ 파라미터가 2개 이상일 때
x,y -> {return x+y;} //오류! 소괄호 생략 불가
중괄호 생략하기
함수의 반환형이 void라면 중괄호도 생략할 수 있다.
(x,y) -> {System.outprintln(x+y);}
	↓ return이 없는 경우
(x,y) -> System.out.println(x+y); //중괄호 생략 가능
return 생략하기
중괄호 안의 구현 코드가 return문만 존재할 때는 중괄호와 return을 모두 생략할 수 있다.
(x,y) -> {return x+y;}
	↓ return문장만 있는 경우
(x,y) -> x+y;

함수형 인터페이스
객체 지향 프로그램에서 인터페이스를 사용하려면 인터페이스를 클래스에서 구현한뒤 사용해야 한다.
람다식은 위와 같은 과정을 생략할 수 있다.
단, 람다식을 이용해 인터페이스를 사용할 경우, 인터페이스는 하나의 기능만을 정의할 수 있다.
람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 인터페이스에 람다식으로 구현할 메서드를 선언해야 한다.
오직 하나의 추상 메서드가 선언된 인터페이스만이 람다식의 타겟 타입이 될 수 있는데
이러한 인터페이스를 '함수형 인터페이스'라고 한다.

MyCalculator 인터페이스 생성하기
package calculator;

public interface MyCalculator {
	int plus(int num1,int num2);
}
간혹 프로그래밍을 하다보면 람다식으로 구현한 인터페이스에 실스로 두 개 이상의 메서드를 추가하는 오류를 범할 수 있다.
이를 방지하고자 어노테이션을 부여해 제한을 줄 수 있다.
이 때 사용하는 어노테이션이 @FunctionalInterface이다.
package calculator;

@FunctionalInterface
public interface MyCalculator {
	int plus(int num1,int num2);
}


