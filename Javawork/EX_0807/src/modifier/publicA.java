/*	제한자
 	클래스, 변수 또는 메서드의 선언부에 함게 사용해 부가적인 의미를 부여하는 키워드
	경우에 따라 여러 개를 조합해 사용할 수 있지만, 
	접근 제한자의 경우 하나만 선택해서 사용해야 한다.
	
	접근제한자
	클래스나 멤버에 접근 가능한 범위를 제한하는 키워드
	객체 지향 프로그래밍의 특징 중 한 가지인 정보 은닉을 지키기 위한 중요한 부분이다.
	
	접근제한자의 종류
	- public : 제한 없이 모든 패키지, 모든 클래스에서 접근 가능하다.
	- protected : 같은 패키지 안에서 접근 가능하며, 다른 패키지라도 자식클래스라면 접근이 가능하다.
	- default : 같은 패키지 내에서만 저근이 가능하다.
	- private : 같은 클래스 내에서만 접근 가능하다.
	
	클래스의 접근 제한자
	클래스는 접근 제한자로 public과 default만 가질 수 있다.
	private과 protected의 경우 클래스 멤버들을 위한 접근 제한자로 
	클래스 외부에서 접근을 막을지 말지에 대한 접근을 제한하는 용도로 사용되기 때문에 
	클래스의 접근 제한자로 사용될 수 없다.
	
	public
 	접근 제한자 중에서 가장 사용 범위가 큰 제어자이다.
	public으로 선언된 클래스와 멤버들은 같은 패키지는 물론 
	다른 패키지의 클래스에서도 접근할 수 있다
	
	예시)
	public 클래스/생성자 : 모든 패키지, 모든 클래스 어디서나 해당 클래스로 객체를 생성할 수 있다.
	public 멤버(필드, 생성자,메서드) : 모든 패키지, 모든 클래스 어디서나 객체를 통해 접근할 수 있다.
	
	default
	접근제한자를 따로 명시하지 않는다면 클래스와 멤버들은 자동으로 default를 가진다.
	default로 선언된 클래스와 멤버들은 같은 패키지 안에서는 어디든지 
	접근 및 사용이 가능하지만 다른 패키지에서는 접근이 불가능하다.
	
	protected
	클래스 멤버를 위한 제한자로, 클래스의 접근 제한자로 사용하지 않는 protected는 상속과 관련있는 제한자이다.
	protected라는 이름처럼 조금 특별하게 클래스 멤버를 보호하고 있다.
	default처럼 같은 패키지 안에서 접근과 사용을 허가하지만, 다른 패키지에서의 접근을 
	완전히 제한하는 것이 아닌 "해당 클래스와 상속 관계에 있는 자식 클래스"라면 다른 패키지라도 접근 및 사용이 가능하다.
	즉, 같은 패키지에서 접근이 가능하며, 다른 패키지라면 자식 클래스만 접근을 허용한다.
	
	private
	가장 사용 범위가 좁은 클래스 멤버를 위한 제한자이다.
	클래스가 public/default이더라도, 
	private로 선언된 멤버들은 클래스 외부에서 접근이 불가능하다.
	오직 선언된 클래스 내부에서만 접근하여 사용할 수 있다.
	따라서 private멤버는 public인터페이스를 직접 구현하지 않고, 
	클래스 내부의 세부적인 동작을 구현하는 데 사용된다.
	
 */
/*	객체 지향의 특징
	1. 캡슐화
	객체 내부의 멤버(필드,메서드 등)를 객체 외부에서 볼 수 없도록 캡슐화 한다.
	접근이 필요한 경우 public 메서드를 활용해 접근 허용하고
	이외의 값들은 모두 캡슐화를 통해 정보를 은닉한다.
	2. 추상화
	공통된 기능과 정보를 추출해 객체화한다.
	3. 상속
	미리 정의된 부모 클래스의 모든 멤버를 자식 클래스가 물려받는다.
	4. 다형성
	하나의 방법으로 여러 객체를 호출하여 사용할 수 있다.

 */


package modifier;

public class publicA {
	public int a;
	
	public publicA(int a) {
		this.a = a;
	}
	
	public void printA() {
		System.out.println("PublicA 클래스의 printA() 메서드이다.");
	}
	DefaultC dc = new DefaultC(); //같은 패키지이기 때문에 객체생성 가능
	void methodA() {
		dc.varableC = 20; //public으로선언된 필드도 객체를 통해 접근 가능
	}
}

