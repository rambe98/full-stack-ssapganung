/*	상속
	상속이란 우리가 일반적으로 알고있는 의미와 비슷하다.
	부모가 자식에게 무언가를 물려주는 것을 상속이라고 부르는 것처럼, 자바에서도 부모 역할을 하는 클래스가
	자식 역할을 하는 클래스에게 클래스 멤버와 메서드를 물려주는것을 상속이라고 한다
	상속은 클래스를 재사용하기 때문에 중복을 줄여주고 수정을 최소화하는 특징을 가지고 있다
	
	상속해주는 클래스를 부모클래스, 상위클래스, 기반클래스 라고한다.
	상속받는 클래스를 자식클래스, 하위클래스, 파생클래스 라고한다.
	
	자바에서 상속을 구현하는 방법은 자식 클래스를 선언할 때, 
	extends라는 키워드를 사용해 상속받을 클래스를 지명한다.
	자식 클래스에서 선택받은 클래스는 부모 클래스 역할을 하게 된다.
	
	class A{ 
	//부모 클래스는 자식 클래스에서 지명받기 전에는 부모 클래스 역할을 하지 않는다.
    ...}

	class B extends A{
	B클래스에서 extends A를 작성함으로써 A는 B의 부모클래스가 되고, 
	B클래스는 A클래스의 자식 클래스가 된다.
    ...}
    
    상속에서의 생성자
    자식 클래스의 객체를 생성할 때, 
    자식 클래스는 자식의 생성자를 통해 자식 객체를 생성한다.
    특별한 역할을 하지 않는 기본 생성자는 비어있는 것이 맞다.
	하지만 자식 클래스의 기본 생성자는 다르다.
	필드 초기화와 같은 특별한 역할을 하고 있지 않더라도 super()라는 메서드를 가지고 있다.
	
	super()
	this()가 같은 클래스의 다른 생성자를 호출할 때 사용된다면, 
	super()메서드는 부모 클래스의 생성자를 호출할 때 사용한다.
	예)
	Comic(*자식클래스)(){
    super();//부모클래스에 기본생성자만 있다면 생략이 가능하다.
	}
	
	자식 클래스로 객체를 생성하기 위해 기본 생성자가 호출되면, 
	super()라는 메서드를 통해 Book(부모클래스)의 기본 생성자를 호출한다.
	그렇게 부모 객체를 먼저 생성한 후, 부모 객체를 감싸고 자식 객체를 생성한다.
	자식 객체 안에는 부모 객체가 들어있게 된다.
	따라서, 개발자가 직접 생성자를 선언할 때도 자식 클래스에서는 
	반드시 부모 클래스의 생성자를 호출해줘야 한다.
	
	만약, 부모 클래스의 생성자가 호출될 때 
	매개변수로 값을 전달받아 부모 클래스의 필드들을 초기화 하도록 구현되어 있다면.
	
	부모클래스(매개변수1,매개변수2){
    this.필드1 = 매개변수1;
    this.필드2 = 매개변수2;
	}
	자식클래스(매개변수1,매개변수2){
    	super(매개변수1,매개변수2);
	}
	
 */

package section06_02;

public class bookMain {

	public static void main(String[] args) {
		Comic comicBook = new Comic();// Comic 클래스의 객체 생성
		comicBook.title = "포켓몬";
		comicBook.price = 4500;
		comicBook.info();
		// 자식 클래스는 부모 클래스의 필드와 메서드를 가져다 사용할 수 있음
		// 자식 클래스라도 부모 클래스의 필드가 private으로 선언되면 사용 불가
		
	}

}
