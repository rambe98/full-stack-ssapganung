/*
 	객체지향 프로그래밍(OOP : Object-Oriented Programming)
 	
 	객체 지향 프로그래밍
 	객체를 지향하는 프로그래밍 방법을 말한다.
	객체란 우리 실생활에 존재하는 모든것으로 생각할 수 있다.
	객체는 일반적으로 상태를 표현할 수 있고, 우리가 행동으로 실행할 수 있는 모든것들을 의미한다.
	이런 객체를 중심으로 프로그램 구조를 설계하고 프로그래밍 하는 것을 객체 지향 프로그래밍이라고 한다.
	
	클래스
	객체를 생성하기 위한 설명서이다.
	떤 물건을 만들기 위한 메뉴얼이라고 생각하면 된다.
	클래스를 기반으로 객체를 생성해야 한다.
	하나의 설명서로 여러개의 물건을 만들 수 있듯이
	자바에서는 하나의 클래스로 여러 개의 객체를 생성할 수 있다.
	
	클래스의 선언
	첫날부터 클래스를 만들어서 사용해왔다.
	자바 프로그래밍의 기반이 클래스이기 때문이다.
	클래스 기본 구조는 다음과 같다.
	
	접근제한자 class 클래스명{}

	접근제한자 : 클래스의 접근 범위를 제한한다.
	class : class를 선언함을 뜻한다.
	클래스명 : 변수처럼 이름을 가지고, 객체를 생성할 때 사용한다.
 	
 	그동한 사용해왔던 클래스는 "실행용"클래스로, 프로그램의 실행을 전적으로 맡고 있다.
 	
 	클래스의 종류
 	
 	1. 실행용 클래스
	프로그램 전체에서 단 하나의 클래스로, 프로그램의 실행을 맡고 있다.
	main메서드를 갖고 있으며, 다른 클래스에서 사용하지 않는다.
	2. 객체 생성용 클래스
	다른 클래스에서 사용할 목적으로 선언되는 클래스이다.
	
	하나의 클래스가 위 두 가지 용도의 역할을 모두 수행할 수 도 있다.
	하지만 유지 보수와 객체 지향 프로그래밍의 특징인 모듈화를 고려해 별도로 분리하여 작성하는 것이 좋다.
	일반적으로 하나의 프로그램에서 실행용 클래스 1개를 제외한 나머지 클래스는 모두 참조용 클래스이다.
	
	클래스 명 규칙
	영어 대소문자를 사용할 수 있으며 보통 첫 글자는 대문자를 사용한다.
	숫자를 사용할 수 있으나 첫 글자로는 사용할 수 없습니다.
	특수문자는 $,_만 가능합니다.
	자바 예약어(키워드)는 사용할 수 없습니다.
 	 	
 	클래스의 구성
 	클래스를 구성하는 요소는 필드,메서드, 생성자 3가지가 있다.
 	
 	필드(field)
 	객체가 가져야할 데이터의 상태를 저장하는 변수를 말한다.
	필드, 전역변수, 멤버 변수 라고 부르는데 다 같은말이다.
	필드의 값을 초기화 하지 않으면 객체 생성시 자동으로 기본값으로 초기화 된다.
	** car class 참조 **
	
	메서드
	객체의 기능을 담당하는 중괄호({})블록을 말한다.
	특정 기능을 수행하는 코드를 따로 빼서 중괄호 안에 작성하며
	1개의 메서드는 일반적으로 1개의 기능을 수행한다.
	메서드 선언
	반환형 메서드명(파라미터){ //머리
	작업할 내용
	return 반환값;
	}
	상황에 따라서 필요하지 않다면 파리미터와 return값은 없어도 된다.
	
	구현된 메서드 사용법
	구현한 메서드를 사용하는 방법은 필드의 사용법과 동일하다.
	메서드를 선언한 클래스 안에서 메서드를 사용할 때는 단순히 메서드명만 호출하면 되지만
	다른 클래스에서 메서드를 사용하려면 객체를 먼저 생성한 후 
	참조 변수를 이용해 그 객체의 메서드를 사용해야 한다.
	개체가 존재해야 메서드도 존재하기 때문이다.
	
	예) car.ride();
	
	메서드의 이름 짓기
	메서드의 이름은 그 기능을 명확하게 설명해줄 수 있게 작성하는 것이 좋다.
	메서드명을 작성하는 규칙 역시 변수를 작성하는 규칙과 동일하다.
	
	생성자(constructor)
	메서드 중 객체를 생성할 때 반드시 호출해야 하는 특수한 기능을 하는 메서드 이다.
	이 메서드는 객체를 생성하면서 객체 변수를 초기화하는 역할을 하기 때문에 생성자라고 부른다.
	클래스명 객체명 = new 클래스명();
	생성자라는 메서드는 클래스명과 이름이 같아야 한다.
	우리는 생성자라는 메서드를 선언한적이 없음에도 호출하여 객체를 생성해 왔다.
	그 이유는 우리가 직접 선언하지 않아도 기본 생성자가 자동으로 생성되고 우리 눈에만 보이지 않기 때문이다.
	
	정적 멤버와 static
	클래스 안에서 선언된 필드와 메서드를 클래스 멤버라고도 부른다.
	클래스에 포함된 요소라는 의미로 '멤버'라는 용어를 사용한다.
	
	
 */

package section05;

class A{
	
}
/* 프로그램을 실행 했을 때, 코드를 컴파일한 결과물은 코드 파일을 각각 작성한것과 동일하게 
각 class 별로 도출되어 2개가 된다.
파일 분리 여부와 상관 없이 결과물이 같기 때문에, 분리 여부는 개발자가 원하는 대로 작성해도 무방하다.
그러나 추후 유지보수의 편리성과 클래스 재사용을 고려해 하나의 파일에 한 개의 클래스를 작성하는 것을 추천합니다.
*/
public class class_ex01 {
	public static void main(String[] args) {
		// 예시 클래스 'Cat'
		Cat c = new Cat();
		// new는 메모리에 객체를 생성하기 위한 공강은 할당 받는 키워드 
		// 자동차 객체 ㅅ애성
		Car car = new Car();
		// 변수명.필드명
		// 변수명 : 클래스를 이용해 만든 객체의 이름
		// 필드명 : 만든 객체가 가이고 있는 필드의 이름
		
		System.out.println("car의 바퀴 수 : "+ car.wheel);
		car.wheel = 4;
		System.out.println("car의 바퀴 수 : "+ car.wheel);
		
		Car car2 = new Car();
		System.out.println("car2의 바퀴 수 : "+ car2.wheel);
		
		car.ride();
		/* 함수의 작동 원리
		메서드를 호출하면 블록 안에 있는 코드들이 위에서 순차적으로 모두 실행되고 
		경우에 따라 실행한 결과를 호출한 곳으로 돌려준다.
		이를 '반환한다'라고 표현하고, 반환하는 결과값을 '반환값(리턴값)'이라고 한다.
		리턴값이 있을 경우에는 리턴할 데이터의 타입이 무엇인지 메서드명()앞에 반환 타입을 기재해줘야 한다.
		반환형은 메서드가 처음부터 끝까지 수행을 마친 후에 반환해야 할 값이 있을 경우에 기입.
		int, String, boolean등 기본자
		료형을 포함하여 사용자가 만든 객체로도 반환이 가능.
		아무것도 반환하지 않을때는 void
		*/
	}

}
